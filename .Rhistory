left_join(gene_id_to_name, by = "gene_id") %>%
select(gene_name, everything())  # move gene_name to front
colnames(pc_loadings)
top_pc_loadings_10PCs <- pc_loadings %>%
select(gene, matches("^PC[1-9]$|^PC10$")) %>%
pivot_longer(cols = starts_with("PC"), names_to = "PC", values_to = "loading") %>%
group_by(PC) %>%
arrange(desc(abs(loading))) %>%
slice(1:10)
library(dplyr)
library(tidyr)
library(ggplot2)
library(patchwork)
# Step 1: Extract top 10 genes per PC based on absolute loading
top_pc_loadings_10PCs <- pc_loadings %>%
select(gene, matches("^PC[1-9]$|^PC10$")) %>%
pivot_longer(cols = starts_with("PC"), names_to = "PC", values_to = "loading") %>%
group_by(PC) %>%
arrange(desc(abs(loading))) %>%
slice(1:10) %>%
ungroup()
# Step 2: Create a plotting function
plot_pc <- function(pc_name) {
data <- top_pc_loadings_10PCs %>% filter(PC == pc_name)
ggplot(data, aes(x = reorder(gene, loading), y = loading, fill = loading > 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
labs(title = paste0("Top Genes - ", pc_name), x = "Gene", y = "Loading") +
scale_fill_manual(values = c("TRUE" = "#1f77b4", "FALSE" = "#d62728")) +
theme_minimal(base_size = 12)
}
# Step 3: Create list of plots for PC1â€“PC10
plot_list <- lapply(paste0("PC", 1:10), plot_pc)
# Step 4: Combine with patchwork (e.g., 2 columns)
combined_plot <- wrap_plots(plot_list, ncol = 2) +
plot_annotation(title = "Top 10 Gene Loadings for PC1 to PC10")
# Step 5: Show the plot
print(combined_plot)
library(dplyr)
library(tidyr)
library(ggplot2)
library(patchwork)
# Step 1: Get top 10 genes by absolute loading for PCs 1 to 10
top_pc_loadings_10PCs <- pc_loadings %>%
select(gene, matches("^PC[1-9]$|^PC10$")) %>%
pivot_longer(
cols = starts_with("PC"),
names_to = "PC",
values_to = "loading"
) %>%
group_by(PC) %>%
arrange(desc(abs(loading))) %>%
slice(1:10) %>%
ungroup()
# Step 2: Plot function for one PC
plot_pc <- function(pc_name) {
top_pc_loadings_10PCs %>%
filter(PC == pc_name) %>%
ggplot(aes(x = reorder(gene, loading), y = loading, fill = loading > 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
labs(
title = paste("Top Genes -", pc_name),
x = "Gene",
y = "Loading"
) +
scale_fill_manual(values = c("TRUE" = "#1f77b4", "FALSE" = "#d62728")) +
theme_minimal(base_size = 12)
}
# Step 3: Create and combine plots for PC1 to PC10
plot_list <- lapply(paste0("PC", 1:10), plot_pc)
combined_plot <- wrap_plots(plot_list, ncol = 2) +
plot_annotation(title = "Top 10 Gene Loadings for PC1 to PC10")
# Step 4: Show plot
combined_plot
ggplot(top_pc_loadings, aes(x = reorder(gene, loading), y = loading, fill = PC)) +
geom_col(position = "dodge") +
coord_flip() +   # flip axes for better readability
labs(title = "Top Gene Loadings for PC1 and PC2",
x = "Gene",
y = "Loading Value") +
theme_minimal()
mappig_df <- tpm_data_frame[,1:2]
mappig_df
pc_loadings
pc_loadings_mapped <- pc_loadings %>%
left_join(mappig_df, by= c("gene" = "gene_id"))
pc_loadings_mapped
pc_loadings_mapped <- pc_loadings %>%
left_join(mappig_df, by= c("gene_id" = "gene"))
mappig_df
pc_loadings_mapped <- pc_loadings %>%
left_join(mappig_df, by= c("gene_id" = "gene_name"))
pc_loadings_mapped
pc_loadings_mapped <- pc_loadings %>%
left_join(mappig_df, by= c("gene_id" = "gene"))
pc_loadings_mapped <- pc_loadings %>%
left_join(mappig_df, by= c("gene" = "gene_id"))
pc_loadings_mapped
pc_loadings_mapped$gene_name
top_genes
top_loadings <- pc_loadings %>%
filter(gene %in% top_genes)
top_loadings <- pc_loadings_mapped %>%
filter(gene %in% top_genes)
top_pc_loadings <- pc_loadings_mapped %>%
filter(gene %in% top_genes) %>%
select(gene, PC1, PC2) %>%
pivot_longer(cols = starts_with("PC"), names_to = "PC", values_to = "loading")
ggplot(top_pc_loadings, aes(x = reorder(gene, loading), y = loading, fill = PC)) +
geom_col(position = "dodge") +
coord_flip() +   # flip axes for better readability
labs(title = "Top Gene Loadings for PC1 and PC2",
x = "Gene",
y = "Loading Value") +
theme_minimal()
top_pc_loadings <- pc_loadings_mapped %>%
filter(gene %in% top_genes) %>%
select(gene_name, PC1, PC2) %>%
pivot_longer(cols = starts_with("PC"), names_to = "PC", values_to = "loading")
ggplot(top_pc_loadings, aes(x = reorder(gene, loading), y = loading, fill = PC)) +
geom_col(position = "dodge") +
coord_flip() +   # flip axes for better readability
labs(title = "Top Gene Loadings for PC1 and PC2",
x = "Gene",
y = "Loading Value") +
theme_minimal()
ggplot(top_pc_loadings, aes(x = reorder(gene_name, loading), y = loading, fill = PC)) +
geom_col(position = "dodge") +
coord_flip() +   # flip axes for better readability
labs(title = "Top Gene Loadings for PC1 and PC2",
x = "Gene",
y = "Loading Value") +
theme_minimal()
pc_loadings_mapped
top_genes_10PCs <- pc_loadings_mapped %>%
select(gene_name, matches("^PC[1-9]$|^PC10$")) %>%
pivot_longer(cols = matches("^PC[1-9]$|^PC10$"), names_to = "PC", values_to = "loading") %>%
group_by(PC) %>%
arrange(desc(abs(loading))) %>%
slice(1:10) %>%
pull(gene) %>%
unique()
top_genes_10PCs <- pc_loadings_mapped %>%
select(gene_name, matches("^PC[1-9]$|^PC10$")) %>%
pivot_longer(cols = matches("^PC[1-9]$|^PC10$"), names_to = "PC", values_to = "loading") %>%
group_by(PC) %>%
arrange(desc(abs(loading))) %>%
slice(1:10) %>%
pull(gene_name) %>%
unique()
top_pc_loadings_10PCs <- pc_loadings_mapped %>%
filter(gene_name %in% top_genes_10PCs) %>%
select(gene_name, matches("^PC[1-9]$|^PC10$")) %>%
pivot_longer(cols = matches("^PC[1-9]$|^PC10$"), names_to = "PC", values_to = "loading")
library(ggplot2)
plot_pc <- function(pc_name) {
data <- top_pc_loadings_10PCs %>% filter(PC == pc_name)
ggplot(data, aes(x = reorder(gene_name, loading), y = loading, fill = loading > 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
labs(title = pc_name, x = "Gene", y = "Loading") +
scale_fill_manual(values = c("TRUE" = "blue", "FALSE" = "red")) +
theme_minimal()
}
plots <- lapply(paste0("PC", 1:10), plot_pc)
combined_plot <- wrap_plots(plots, ncol = 2) +
plot_annotation(title = "Top 10 Gene Loadings per PC (1-10)")
combined_plot
plot_pc <- function(pc_name) {
data <- top_pc_loadings_10PCs %>% filter(PC == pc_name)
ggplot(data, aes(x = reorder(gene_name, loading), y = loading, fill = loading > 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
labs(title = pc_name, x = "Gene", y = "Loading") +
scale_fill_manual(values = c("TRUE" = "blue", "FALSE" = "red")) +
theme_minimal(base_size = 14) +  # Controls base text size
theme(
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 10),
axis.title = element_text(size = 14),
plot.title = element_text(size = 16, face = "bold")
)
}
library(patchwork)
plots <- lapply(paste0("PC", 1:10), plot_pc)
combined_plot <- wrap_plots(plots, ncol = 2) +
plot_annotation(title = "Top 10 Gene Loadings per PC (1-10)")
combined_plot
plot_pc <- function(pc_name) {
data <- top_pc_loadings_10PCs %>% filter(PC == pc_name)
ggplot(data, aes(x = reorder(gene_name, loading), y = loading, fill = loading > 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
labs(title = pc_name, x = "Gene", y = "Loading") +
scale_fill_manual(values = c("TRUE" = "blue", "FALSE" = "red")) +
theme_minimal(base_size = 14) +  # Controls base text size
theme(
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 6),
axis.title = element_text(size = 14),
plot.title = element_text(size = 16, face = "bold")
)
}
library(patchwork)
plots <- lapply(paste0("PC", 1:10), plot_pc)
combined_plot <- wrap_plots(plots, ncol = 2) +
plot_annotation(title = "Top 10 Gene Loadings per PC (1-10)")
combined_plot
plot_pc <- function(pc_name) {
data <- top_pc_loadings_10PCs %>% filter(PC == pc_name)
ggplot(data, aes(x = reorder(gene_name, loading), y = loading, fill = loading > 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
labs(title = pc_name, x = "Gene", y = "Loading") +
scale_fill_manual(values = c("TRUE" = "blue", "FALSE" = "red")) +
theme_minimal(base_size = 14) +  # Controls base text size
theme(
axis.text.y = element_text(size = 6),
axis.text.x = element_text(size = 6),
axis.title = element_text(size = 14),
plot.title = element_text(size = 16, face = "bold")
)
}
library(patchwork)
plots <- lapply(paste0("PC", 1:10), plot_pc)
combined_plot <- wrap_plots(plots, ncol = 2) +
plot_annotation(title = "Top 10 Gene Loadings per PC (1-10)")
combined_plot
plot_pc <- function(pc_name) {
data <- top_pc_loadings_10PCs %>% filter(PC == pc_name)
ggplot(data, aes(x = reorder(gene_name, loading), y = loading, fill = loading > 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
labs(title = pc_name, x = "Gene", y = "Loading") +
scale_fill_manual(values = c("TRUE" = "blue", "FALSE" = "red")) +
theme_minimal(base_size = 14) +  # Controls base text size
theme(
axis.text.y = element_text(size = 3),
axis.text.x = element_text(size = 6),
axis.title = element_text(size = 14),
plot.title = element_text(size = 16, face = "bold")
)
}
library(patchwork)
plots <- lapply(paste0("PC", 1:10), plot_pc)
combined_plot <- wrap_plots(plots, ncol = 2) +
plot_annotation(title = "Top 10 Gene Loadings per PC (1-10)")
combined_plot
install.packages("ggrepel")  # if not already installed
library(ggrepel)
plot_pc <- function(pc_name) {
data <- top_pc_loadings_10PCs %>% filter(PC == pc_name)
ggplot(data, aes(x = reorder(gene_name, loading), y = loading, fill = loading > 0)) +
geom_col(show.legend = FALSE) +
geom_text_repel(aes(label = gene_name),
size = 3,
nudge_y = 0.5,
direction = "y",
segment.color = "gray80",
max.overlaps = Inf) +
coord_flip() +
labs(title = pc_name, x = NULL, y = "Loading") +
scale_fill_manual(values = c("TRUE" = "blue", "FALSE" = "red")) +
theme_minimal(base_size = 14) +
theme(
axis.text.y = element_blank(),  # hide overlapping y-axis text
axis.text.x = element_text(size = 10),
axis.title = element_text(size = 14),
plot.title = element_text(size = 16, face = "bold")
)
}
library(patchwork)
plots <- lapply(paste0("PC", 1:10), plot_pc)
combined_plot <- wrap_plots(plots, ncol = 2) +
plot_annotation(title = "Top 10 Gene Loadings per PC (1-10)")
combined_plot
plot_pc <- function(pc_name) {
data <- top_pc_loadings_10PCs %>% filter(PC == pc_name)
ggplot(data, aes(x = reorder(gene_name, loading), y = loading, fill = loading > 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
labs(title = pc_name, x = "Gene", y = "Loading") +
scale_fill_manual(values = c("TRUE" = "blue", "FALSE" = "red")) +
theme_minimal(base_size = 14) +
theme(
axis.text.y = element_text(size = 3),
axis.text.x = element_text(size = 6),
axis.title = element_text(size = 14),
plot.title = element_text(size = 16, face = "bold"),
plot.margin = margin(t = 10, r = 10, b = 10, l = 50)  # increase left margin (l)
)
}
library(patchwork)
plots <- lapply(paste0("PC", 1:10), plot_pc)
combined_plot <- wrap_plots(plots, ncol = 2) +
plot_annotation(title = "Top 10 Gene Loadings per PC (1-10)")
combined_plot
save.image("~/new_tcga/Untitled.RData")
load("/Users/abdelazizawad/uc_singlecell/last.RData")
length(unique(tcr_combined$cdr3))
library(scRepertoire)
library(Seurat)
library(tidyverse)
tcr_files
setwd("~/uc_singlecell")
tcr_files <- list.files(pattern = "full-length_productive_TCR_table.tsv$")
bcr_files <- list.files(pattern = "full-length_productive_BCR_table.tsv$")
# Load TCR
tcr_combined <- combineTCR(
tcr_list,
samples = sapply(tcr_list, function(x) unique(x$sample))
)
tcr_combined <- combineTCR(
tcr_list,
samples = sapply(tcr_list, function(x) unique(x$sample))
)
tcr_files
tcr_list <- lapply(tcr_files, function(f) {
df <- tryCatch(read.delim(f), error = function(e) NULL)
if (!is.null(df)) df$sample <- sub(".tsv.gz$", "", f)  # Add sample name
return(df)
})
names(tcr_list) <- tcr_files
tcr_list <- Filter(Negate(is.null), tcr_list)  # Remove failed reads
bcr_list <- lapply(bcr_files, function(f) {
df <- tryCatch(read.delim(f), error = function(e) NULL)
if (!is.null(df)) df$sample <- sub(".tsv.gz$", "", f)  # Add sample name
return(df)
})
names(bcr_list) <- bcr_files
bcr_list <- Filter(Negate(is.null), bcr_list)
required_cols <- c("barcode", "v_gene", "j_gene", "cdr3", "cdr3_nt", "sample")
clean_df <- function(df, required_cols) {
for (col in required_cols) {
if (!col %in% colnames(df)) df[[col]] <- NA
df[[col]] <- as.character(df[[col]])
}
return(df[, required_cols])
}
tcr_df <- do.call(rbind, lapply(tcr_list, clean_df, required_cols))
bcr_df <- do.call(rbind, lapply(bcr_list, clean_df, required_cols))
bcr_df$chain <- ifelse(grepl("^IGH", bcr_df$v_gene), "IGH",
ifelse(grepl("^IGK", bcr_df$v_gene), "IGK",
ifelse(grepl("^IGL", bcr_df$v_gene), "IGL", NA)))
tcr_df <- tcr_df[!is.na(tcr_df$cdr3) & nchar(tcr_df$cdr3) >= 6, ]
bcr_df <- bcr_df[!is.na(bcr_df$cdr3) & nchar(bcr_df$cdr3) >= 6, ]
library(dplyr)
# TCR clonotypes
tcr_df <- tcr_df %>%
mutate(clonotype_id = as.numeric(factor(cdr3)))
# BCR clonotypes
bcr_df <- bcr_df %>%
mutate(clonotype_id = as.numeric(factor(cdr3)))
tcr_freq <- tcr_df %>%
group_by(clonotype_id) %>%
summarise(count = n()) %>%
arrange(desc(count))
# BCR
bcr_freq <- bcr_df %>%
group_by(clonotype_id) %>%
summarise(count = n()) %>%
arrange(desc(count))
ggplot(tcr_freq[1:10, ], aes(x = reorder(as.factor(clonotype_id), -count), y = count)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Top 10 TCR Clonotypes",
x = "Clonotype ID",
y = "Cell Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(dplyr)
library(vegan)  # For diversity calculation
# Function to compute Shannon index for each sample
compute_shannon <- function(df) {
df %>%
group_by(sample, clonotype_id) %>%
summarise(count = n(), .groups = "drop") %>%
tidyr::pivot_wider(names_from = clonotype_id, values_from = count, values_fill = 0) %>%
column_to_rownames("sample") %>%
diversity(index = "shannon")
}
tcr_shannon <- compute_shannon(tcr_df)
tcr_shannon_df <- data.frame(sample = names(tcr_shannon), shannon = tcr_shannon, receptor = "TCR")
bcr_shannon <- compute_shannon(bcr_df)
bcr_shannon_df <- data.frame(sample = names(bcr_shannon), shannon = bcr_shannon, receptor = "BCR")
diversity_df <- rbind(tcr_shannon_df, bcr_shannon_df)
ggplot(diversity_df, aes(x = basename(sample), y = shannon, fill = receptor)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Shannon Diversity Index by Sample",
x = "Sample",
y = "Shannon Index (Diversity)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(scRepertoire)
tcr_combined
tcr_list <- lapply(tcr_list, function(df) {
df$chain <- ifelse(grepl("^TRA", df$v_gene), "TRA",
ifelse(grepl("^TRB", df$v_gene), "TRB", NA))
return(df)
})
tcr_combined <- combineTCR(
tcr_list,
samples = names(tcr_list),
ID = "sample"
)
clonalHomeostasis(tcr_combined, cloneCall = "aa", chain = "both")
clonalProportion(tcr_combined, cloneCall = "aa", chain = "both")
clonalOverlap(tcr_combined, cloneCall = "aa", method = "morisita")
tcr_combined <- lapply(tcr_combined, function(df) {
df$barcode <- sub(".*_", "", df$barcode)  # remove prefix up to last underscore
return(df)
})
seurat <- combineExpression(tcr_combined, seurat, cloneCall = "aa", group.by = "sample")
DimPlot(seurat, group.by = "Cluster_id")  # if clone_id added as metadata
bcr_combined <- lapply(bcr_combined, function(df) {
df$barcode <- sub(".*_", "", df$barcode)  # Keep only the cell barcode
return(df)
})
bcr_combined <- combineBCR(
bcr_list,
samples = sapply(bcr_list, function(x) unique(x$sample))
)
bcr_list <- lapply(bcr_list, function(df) {
df$chain <- ifelse(grepl("^IGH", df$v_gene), "IGH",
ifelse(grepl("^IGK", df$v_gene), "IGK",
ifelse(grepl("^IGL", df$v_gene), "IGL", NA)))
# Fix all columns to ensure no list/factor issues
bcr_list <- lapply(bcr_list, function(df) {
df$barcode     <- as.character(df$barcode)
df$v_gene      <- as.character(df$v_gene)
df$j_gene      <- as.character(df$j_gene)
df$cdr3        <- as.character(df$cdr3)
df$cdr3_nt     <- as.character(df$cdr3_nt)
df$sample      <- as.character(df$sample)
df$chain       <- as.character(df$chain)
df$celltype    <- as.character(df$celltype)
df$patient_id  <- as.character(df$patient_id)
df$tissue_type <- as.character(df$tissue_type)
df$disease     <- as.character(df$disease)
df$batch_id    <- as.character(df$batch_id)
return(df)
})
bcr_combined <- combineBCR(
bcr_list,
samples = sapply(bcr_list, function(x) unique(x$sample))
)
bcr_df <- do.call(rbind, bcr_list)
0
0)
bcr_combined <- combineBCR(
bcr_list,
samples = sapply(bcr_list, function(x) unique(x$sample))
)
# merge bcr files
library(dplyr)
# Step 1: Clean sample names
sample_names <- sub("GSM\\d+_", "", names(bcr_list))
sample_names <- sub("_full-length_productive_BCR_table.tsv", "", sample_names)
# Step 2: Add clean sample names to each df
for (i in seq_along(bcr_list)) {
bcr_list[[i]]$sample <- sample_names[i]
}
# Step 3: Combine all BCRs into one big dataframe
bcr_df <- bind_rows(bcr_list)
# Step 4: Add chain info (if missing)
if (!"chain" %in% colnames(bcr_df)) {
bcr_df$chain <- ifelse(grepl("^IGH", bcr_df$v_gene), "IGH",
ifelse(grepl("^IGK", bcr_df$v_gene), "IGK",
ifelse(grepl("^IGL", bcr_df$v_gene), "IGL", NA)))
}
# Step 5: Keep only productive sequences with valid CDR3
bcr_df <- bcr_df %>%
filter(!is.na(cdr3), nchar(cdr3) >= 6)
# Step 6: Make barcode unique (remove prefixes if any)
bcr_df$barcode <- sub(".*_", "", bcr_df$barcode)
# Step 7: Assign clonotype IDs based on amino acid sequence
bcr_df$clonotype_id <- as.numeric(factor(bcr_df$cdr3))
top_clones <- bcr_df %>%
count(clonotype_id, sort = TRUE) %>%
head(10)
print(top_clones)
# Format for merge
bcr_meta <- bcr_df %>%
distinct(barcode, sample, clonotype_id, .keep_all = TRUE) %>%
select(barcode, clonotype_id)
# Make sure barcodes match those in Seurat
bcr_meta$barcode <- gsub("-1$", "", bcr_meta$barcode)  # if needed to match Seurat format
bcr_meta_unique <- bcr_meta[!duplicated(bcr_meta$barcode), ]
rownames(bcr_meta_unique) <- bcr_meta_unique$barcode
seurat <- AddMetaData(seurat, metadata = bcr_meta_unique["clonotype_id"])
bcr_freq <- bcr_df %>%
count(clonotype_id, sort = TRUE)
ggplot(bcr_freq[1:10, ], aes(x = reorder(as.factor(clonotype_id), -n), y = n)) +
geom_bar(stat = "identity", fill = "darkgreen") +
labs(title = "Top 10 BCR Clonotypes",
x = "Clonotype ID", y = "Number of Cells") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
DimPlot(seurat, group.by = "clonotype_id", label = FALSE, pt.size = 1) +
ggtitle("UMAP Colored by BCR Clonotype")
seurat
expanded_clones <- bcr_df %>%
count(clonotype_id) %>%
filter(n >= 3) %>%
pull(clonotype_id)
seurat$expanded_clone <- ifelse(seurat$clonotype_id %in% expanded_clones, "Expanded", "Not Expanded")
DimPlot(seurat, group.by = "expanded_clone") +
ggtitle("Expanded BCR Clonotypes")
expanded_clones
clonotype_id
seurat$expanded_clone
save.image("~/uc_singlecell/Untitled.RData")
